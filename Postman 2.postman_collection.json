{
	"info": {
		"_postman_id": "6e9e64b4-a425-4427-b65c-512ac5d73b8c",
		"name": "Homework_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Проверяем, что response имеет в body именно это значение.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							"//Проверяем, что response включает в себя строку \"This is the first responce from server!\"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							"//Проверяем, что response это тип данных string\r",
							"pm.test(\"Body type is string\", function () {\r",
							"    pm.expect(pm.response.text()).to.be.a('string');\r",
							"});\r",
							" "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Natalia\");\r",
							"});\r",
							"\r",
							"//Преобразовываем age из строки в число, и затем - Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"var age = + jsonData.age\r",
							"pm.test(\"Age\", function () {\r",
							"    pm.expect(age).to.eql(29);\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(10000);\r",
							"});\r",
							"//Парсим request\r",
							"var reqBody = request.data\r",
							"console.log(reqBody)\r",
							"\r",
							"//Проверяем,что name в ответе = name s request (name забрать из request.)\r",
							"pm.test(\"Name_request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqBody.name);\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Aqe_request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqBody.age);\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var salary_request = +reqBody.salary //Преобразовываем request salary из строки в число\r",
							"pm.test(\"Salary_request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(salary_request);\r",
							"});\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log (jsonData.family)\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(reqBody.salary * 4);\r",
							"});\r",
							"\r",
							"\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра family.\r",
							"for (var i in jsonData.family){\r",
							"    console.log (i, jsonData.family[i]);\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Natalia",
							"type": "text"
						},
						{
							"key": "age",
							"value": "29",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "10000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData)\r",
							"\r",
							"// Спарсить request.\r",
							"var reqData = pm.request.url.query.toObject();\r",
							"console.log(reqData) //Нажать стрелку вниз,в консоли, чтобы увидеть значения.\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name\", function () {\r",
							"pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age\", function () {\r",
							"pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"var salary = +reqData.salary //Преобразовываем salary_request в число\r",
							"pm.test(\"Salary\", function () {\r",
							"pm.expect(jsonData.salary).to.eql(salary);\r",
							"});\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dod has name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dod has age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"//Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dogs name is Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dogs age is 4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql (4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Natalia&age=29&salary=10000",
					"host": [
						"{{url}}"
					],
					"path": [
						"",
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Natalia"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData)\r",
							"// Спарсить request.\r",
							"var reqData = pm.request.url.query.toObject();\r",
							"console.log(reqData) //Нажать стрелку вниз,в консоли, чтобы увидеть значения.\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name\", function () {\r",
							"pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"var age_request =+reqData.age //преобразовываем в число возраст из реквеста.\r",
							"pm.test(\"Age\", function () {\r",
							"pm.expect(jsonData.age).to.eql(age_request);\r",
							"});\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log(\"Salary from request = \" + reqData.salary)\r",
							"//Вывести в консоль параметр salary из response.\r",
							"console.log (\"Salary from response = \" + jsonData.salary)\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log (\"Salary_0 from response = \" + jsonData.salary[0])\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log (\"Salary_1 from response = \" +jsonData.salary[1])\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log (\"Salary_2 from response = \" +jsonData.salary[2])\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"var salary_request = +reqData.salary //Преобразовываем в число\r",
							"pm.test(\"Salary_0_respose = salary_request\", function () {\r",
							"pm.expect(jsonData.salary[0]).to.eql(salary_request);\r",
							"});\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"var salary_res_1 = +jsonData.salary[1]//Преобразовываем в число\r",
							"pm.test(\"Salary_1_response = salary*2_request\", function () {\r",
							"pm.expect(salary_res_1).to.eql(salary_request*2);\r",
							"});\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"var salary_res_2 = +jsonData.salary[2]//Преобразовываем в число\r",
							"pm.test(\"Salary_2_response = salary*3_request\", function () {\r",
							"pm.expect(salary_res_2).to.eql(reqData.salary*3);\r",
							"});\r",
							"//Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", reqData.name);\r",
							"//Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", reqData.age);\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", reqData.salary);\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (var i = 0; i < jsonData.salary.length ; i++) \r",
							"console.log(jsonData.salary[i]);\r",
							"//Или\r",
							"for (var i in jsonData.salary) { \r",
							"console.log(i, jsonData.salary[i]);\r",
							"};\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Natalia&age=29&salary=10000",
					"host": [
						"{{url}}"
					],
					"path": [
						"",
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Natalia"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"//Спарсить request.\r",
							"var reqBody = request.data\r",
							"console.log(reqBody)\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Response has: start_qa_salary\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Response has: qa_salary_after_6_months\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Response has: qa_salary_after_12_months\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Response has: qa_salary_after_1.5_year\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Response has: qa_salary_after_3.5_years\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"Response has:person\", function () {\r",
							"pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"var req_salary = +reqBody.salary //Преобразовываем в число\r",
							"pm.test(\" start_qa_salary = salary из request\", function () {\r",
							"pm.expect(jsonData.start_qa_salary).to.eql(req_salary);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\" qa_salary_after_6_months = salary*2\", function () {\r",
							"pm.expect(jsonData.qa_salary_after_6_months).to.eql(req_salary*2);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request(salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months = salary*2.7\", function () {\r",
							"pm.expect(jsonData.qa_salary_after_12_months).to.eql(req_salary*2.7);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3\", function () {\r",
							"pm.expect(jsonData[\"qa_salary_after_1.5_year\"]) .to.eql(req_salary*3.3);//из-за точки берем параметр в []\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request(salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years = salary*3.8\", function () {\r",
							"pm.expect(jsonData[\"qa_salary_after_3.5_years\"]) .to.eql(req_salary*3.8);//из-за точки берем параметр в []\r",
							"});\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request \r",
							"//(salary забрать из request.)\r",
							"pm.test(\" person_u_name[1] = salary из request\", function () {\r",
							"pm.expect(jsonData.person.u_name[1]).to.eql(req_salary);\r",
							"});\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"var age_request = +reqBody.age\r",
							"pm.test(\" person.u_age = age из request\", function () {\r",
							"pm.expect(jsonData.person.u_age).to.eql(age_request);\r",
							"});\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\" u_salary_5_years = salary*4.2 из request\", function () {\r",
							"pm.expect(jsonData.person.u_salary_5_years).to.eql(req_salary*4.2);\r",
							"});\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"for (var prop  in jsonData.person) \r",
							"console.log(prop + \" : \"+ jsonData.person[prop]);\r",
							"//Или\r",
							"for (var i in jsonData.person) { \r",
							"console.log(i, jsonData.person[i]); \r",
							"};\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}